


	
	
	
	
	
	
	
	
	
 
	///=============================================================
	///@function subtract(_other)
	///@param {Vec2} _other
	///-------------------------------------------------------------
	///function subtract (_other)
	///{///@description Subtracts two vectors returning a new one.
	///	return new Vec2(self.x - _other.x, self.y - _other.y);
	///}	
	///



	
	






	///=============================================================
	///@function multiple(_other)
	///@param {Vec2} _other
	///-------------------------------------------------------------
	///function multiply (_other)
	///{///@description Multiplies two vectors returning a new one.
	///	return new Vec2(self.x * _other.x, self.y * _other.y);
	///}
	///_____________________________________________________________	
	
	///=============================================================
	///@function divide(_other)
	///@param {Vec2} _other
	///-------------------------------------------------------------
	///function divide (_other)
	///{///@description Divides two vectors returning a new one.
	///	return new Vec2(self.x / _other.x, self.y / _other.y);
	///}
	///_____________________________________________________________
	
	///=============================================================
	///@function dot(_other)	
	///@param {Vec2} _other 
	///-------------------------------------------------------------
	///function dot (_other)
	///{///@description Returns the Dot product of two vectors
	///	return (self.x * _other.x) + (self.y * _other.y);   
	///}
	///_____________________________________________________________
	


















	///=============================================================
	///=================== 3D FUNCTIONS ========================
	///_____________________________________________________________
	///                                                              
	///   THESE FUNCTIONS ACCEPT XYZ AS PARAMETERS INSTEAD OF                                                     
	///   ACCEPTING VECTORS LIKE THE PREVIOUS
	///                                                                 
	///xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
	///=============================================================
	
		
	///=============================================================
	///@function inline_add3D(_other)
	///@param {Vec3} _other
	///-------------------------------------------------------------
	function inline_add3D (_other)
	{///@description Adds two vectors returning a new one.
		x += _other.x;
		y += _other.y;
		z += _other.z;
	}
	///_____________________________________________________________
	
	
	///=============================================================
	///@function inline_sub3D(_other)
	///@param {Vec3} _other
	///-------------------------------------------------------------  
	function inline_sub3D(_other)
	{///@description Subtracts two vectors returning a new one.
		x -= _other.x;
		y -= _other.y;
		z -= _other.z;
	}	
	///_____________________________________________________________
	
	
	///=============================================================
	///@function inline_mult3D(_other)
	///@param {Vec3} _other
	///-------------------------------------------------------------
	function inline_mult3D (_other)
	{///@description Multiplies two vectors returning a new one.
		
		x *= _other.x;
		y *= _other.y;
		z *= _other.z;
	}
	///_____________________________________________________________
	
	
	///=============================================================
	///@function inline_div3D(_other)
	///@param {Vec3} _other
	///-------------------------------------------------------------
	function inline_div3D (_other)
	{///@description Divides two vectors returning a new one.
		x /= _other.x;
		y /= _other.y;
		z /= _other.z;
	}
	///_____________________________________________________________
	
	
	///=============================================================
	///@function inline_cross3D(_other)	
	///@param {Vec3} _other
	///-------------------------------------------------------------
	function inline_cross3D (_other)
	{ ///@description Returns the Cross product of two vectors
		var dx = (y * _other.z) - (_other.y * z);
		var dy = (_other.x * z) - (x * _other.z);
		var dz = (x * _other.y) - (_other.x * y);
		x = dx;		y = dy;		z = dz;
	}
	///_____________________________________________________________